{"version":3,"mappings":";yhCAEA,MASeA,EATMC,EAAY,CAC/BC,KAAM,aACNC,aAAc,CACZC,QAAS,IAEXC,SAAU,KAIgBC,QCTtBC,EAAYN,EAAY,CAC5BC,KAAM,WACNC,aAAc,CACZK,SAAU,CACRN,KAAM,UAGVG,SAAU,CACRI,YAAa,CAACC,EAAOC,KACZ,IAAKD,EAAOF,SAAUG,EAAMC,cAK5BH,YAAEA,GAAgBF,EAAUM,QCZnCC,EAAcC,EAAgB,CAClCP,SDYaD,EAAUD,QCXvBN,gBCkDIgB,EAAQC,EAAe,CAC3BX,QATuBY,EARkC,CACzDC,IAAK,gBACLC,QAdkB,oBAAXC,OAAyBC,EAAiB,WAnB1C,CACLC,QAAkC,IACzBC,QAAQC,QAAQ,MAGzBC,QAAA,CAAQC,EAAcC,IACbJ,QAAQC,QAAQG,GAEzBC,WAA4B,IACnBL,QAAQC,WAyBnBK,WAAY,CATIC,GACfC,GAAiBA,IACjBC,GAAkBA,KAQnBC,UDnCgB,CAAC,aCuC2CpB,GAU5DqB,WAAaC,GACXA,EAAqB,CACnBC,kBAAmB,CACjBC,eAAgB,CACd,kBACA,oBACA,gBACA,gBACA,uBAGHC,OAAOC,KAIRC,EAAYC,EAAa1B,4gCCjElB2B,EAAY,EAAGxB,MAAKS,QAAOgB,cAC9BC,EAAAC,IAAI3B,EAAKS,EAAOgB,EAAO,EAGpBG,EAAa5B,GAAoC6B,EAAQC,IAAI9B,GCRpE+B,EAAOC,EAAMC,MAAK,IAAMC,GAAA,IAAAC,OAAO,wBAAcC,gCAC7CC,EAAQL,EAAMC,MAAK,IAAMC,GAAA,IAAAC,OAAO,wBAAeC,gCAC/CE,EAAeN,EAAMC,MAAK,IAAMC,GAAA,IAAAC,OAAO,wBAAsBC,8BAC7DG,EAAgBP,EAAMC,MAAK,IAAMC,GAAA,IAAAC,OAAO,wBAAuBC,8BAU/DnD,EAAUuD,EAAoB,CAClC,CACEC,KAAM,IACNC,cAAUX,EAAK,IACfY,OAZwB,IACbf,EAAU,YAIhB,KAFEgB,EAAS,UAUhBC,SAAU,CACR,CACEJ,KAAM,IACNC,QAAUI,MAAA,OAAID,SAAE,QAElB,CACEJ,KAAM,kBACNC,cAAUH,EAAc,KAE1B,CACEE,KAAM,gBACNC,QAAUI,MAAA,OAAID,SAAI,UAEpB,CACEJ,KAAM,aACNC,QAAUI,MAAA,OAAID,SAAI,UAEpB,CACEJ,KAAM,mBACNC,QAAUI,MAAA,OAAID,SAAI,YAIxB,CACEJ,KAAM,SACNC,cAAUL,EAAM,KAElB,CACEI,KAAM,IACNC,cAAUJ,EAAa,OC/CrBS,EAAgB,IACnBD,MAAAE,WAAA,CAASC,SAAUC,EAAAJ,IAAC,MAAI,CAAAD,SAAA,WACvBA,eAACM,EAAe,CAAAC,OAAQnE,MCEtBoE,EAAYC,SAASC,eAAe,QAC7BC,aAAWH,GAEnBI,aACFC,EAAS,CAAA7D,QACRgD,SAACK,EAAAJ,IAAAa,EAAA,CAAYC,QAAS,KAAMtC,YAC1BuB,SAACC,MAAAd,EAAM6B,WAAN,CACChB,SAAAC,MAACC,EAAI","names":["routersData","createSlice","name","initialState","routers","reducers","reducer","userSlice","userinfo","setUserinfo","state","actio","payload","actions","rootReducer","combineReducers","store","configureStore","persistReducer","key","storage","window","createWebStorage","getItem","Promise","resolve","setItem","_key","value","removeItem","transforms","createTransform","inboundState","outboundState","whitelist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","concat","thunk","persistor","persistStore","setCookie","options","api","set","getCookie","Cookies","get","Home","React","lazy","__vitePreload","import","__VITE_PRELOAD__","Login","NotFoundPage","TicketsCreate","createBrowserRouter","path","element","loader","redirect","children","jsx","App","Suspense","fallback","jsxRuntimeExports","RouterProvider","router","container","document","getElementById","createRoot","render","Provider","PersistGate","loading","StrictMode"],"ignoreList":[],"sources":["../../../src/models/routerModels/index.ts","../../../src/models/userModels/index.ts","../../../src/models/index.ts","../../../src/store/index.ts","../../../src/utils/cookies.ts","../../../src/router/index.tsx","../../../src/App.tsx","../../../src/main.tsx"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst routersSlice = createSlice({\n  name: 'xms/router',\n  initialState: {\n    routers: [],\n  },\n  reducers: {},\n});\n\nexport const {} = routersSlice.actions;\nexport default routersSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst userSlice = createSlice({\n  name: 'userinfo',\n  initialState: {\n    userinfo: {\n      name: 'admin',\n    },\n  },\n  reducers: {\n    setUserinfo: (state, actio) => {\n      return { ...state, userinfo: actio.payload };\n    },\n  },\n});\n\nexport const { setUserinfo } = userSlice.actions;\nexport default userSlice.reducer;\n","import { combineReducers } from 'redux';\nimport routersData from './routerModels';\nimport userinfo from './userModels';\n\nconst rootReducer = combineReducers({\n  userinfo,\n  routersData,\n});\n\nconst whitelist = ['userinfo'];\n\nexport { rootReducer, whitelist };\n","import { configureStore } from '@reduxjs/toolkit';\nimport { createTransform, PersistConfig, persistReducer, persistStore } from 'redux-persist';\nimport createWebStorage from 'redux-persist/lib/storage/createWebStorage';\nimport { thunk } from 'redux-thunk';\nimport { rootReducer, whitelist } from '@/models';\nimport { IStoreProps } from '@/models/tyeps';\n\n// 创建存储引擎\nconst createNoopStorage = () => {\n  return {\n    getItem(): Promise<string | null> {\n      return Promise.resolve(null);\n    },\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    setItem(_key: string, value: any): Promise<any> {\n      return Promise.resolve(value);\n    },\n    removeItem(): Promise<void> {\n      return Promise.resolve();\n    },\n  };\n};\n\n/**\n * 根据当前环境选择使用 sessionStorage 还是无操作存储。\n * 如果在浏览器环境中，则使用 sessionStorage；否则使用无操作存储。\n */\nconst webStorage =\n  typeof window !== 'undefined' ? createWebStorage('session') : createNoopStorage();\n\n/**\n * 创建一个自定义转换器，用于序列化和反序列化状态。\n * 这里简单地返回输入的状态，可以根据需要进行更复杂的转换。\n */\nconst transform = createTransform<Partial<IStoreProps>, Partial<IStoreProps>, Partial<IStoreProps>>(\n  (inboundState) => inboundState, // 序列化\n  (outboundState) => outboundState, // 反序列化\n);\n\n// 配置持久化\nconst persistConfig: PersistConfig<Partial<IStoreProps>> = {\n  key: 'asp-admin-xms',\n  storage: webStorage,\n  transforms: [transform], // 使用转换\n  whitelist,\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst persistedReducer = persistReducer(persistConfig as any, rootReducer);\n\n/**\n * 配置 Redux store，包括：\n * - `reducer`: 经过持久化处理的根 reducer\n * - `middleware`: 默认中间件加上 `thunk` 中间件\n *   - `serializableCheck`: 忽略某些特定的 action 类型，防止序列化检查报错\n */\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [\n          'persist/PERSIST',\n          'persist/REHYDRATE',\n          'persist/PAUSE',\n          'persist/PURGE',\n          'persist/REGISTER',\n        ], // 忽略 `redux-persist` 内部使用的 action 类型\n      },\n    }).concat(thunk),\n});\n\n// 创建持久化存储\nconst persistor = persistStore(store);\n\nexport { store, persistor };\n","import Cookies from 'js-cookie';\n\ninterface ISetCookieType {\n  key: string;\n  value: string;\n  options: Cookies.CookieAttributes;\n}\n\nexport const setCookie = ({ key, value, options }: ISetCookieType): void => {\n  Cookies.set(key, value, options);\n};\n\nexport const getCookie = (key: string): string | undefined => Cookies.get(key);\n\nexport const removeCookie = (key: string): void => {\n  Cookies.remove(key);\n};\n","import React from 'react';\nimport { createBrowserRouter, redirect } from 'react-router-dom';\nimport { getCookie } from '@/utils/cookies';\n\nconst Home = React.lazy(() => import('@/pages/Home'));\nconst Login = React.lazy(() => import('@/pages/Login'));\nconst NotFoundPage = React.lazy(() => import('@/pages/NotFoundPage'));\nconst TicketsCreate = React.lazy(() => import('@/pages/ticketsCreate'));\n\nconst isUserAuthenticated = () => {\n  const user = getCookie('username');\n  if (!user) {\n    return redirect('/login');\n  }\n  return null;\n};\n\nconst routers = createBrowserRouter([\n  {\n    path: '/',\n    element: <Home />,\n    loader: isUserAuthenticated,\n    children: [\n      {\n        path: '/',\n        element: <div>首页</div>,\n      },\n      {\n        path: '/tickets/create',\n        element: <TicketsCreate />,\n      },\n      {\n        path: '/tickets/list',\n        element: <div>工单列表</div>,\n      },\n      {\n        path: '/customers',\n        element: <div>客户列表</div>,\n      },\n      {\n        path: '/service-records',\n        element: <div>客户记录</div>,\n      },\n    ],\n  },\n  {\n    path: '/login',\n    element: <Login />,\n  },\n  {\n    path: '*',\n    element: <NotFoundPage />,\n  },\n]);\n\nexport default routers;\n","import React, { Suspense } from 'react';\nimport { RouterProvider } from 'react-router-dom';\nimport routers from './router';\n\nconst App: React.FC = () => (\n  <Suspense fallback={<div>...加载中</div>}>\n    <RouterProvider router={routers} />\n  </Suspense>\n);\n\nexport default App;\n","import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from './store';\nimport App from './App';\nimport './main.scss';\n\nconst container = document.getElementById('root') as HTMLElement;\nconst root = createRoot(container);\n\nroot.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </PersistGate>\n  </Provider>,\n);\n"],"file":"js/app/index.DhjT6uIl.js"}